const { sequelize } = require('./config/database');
const Student = require('./model/Student');

async function main() {
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î
    console.log('üîÑ –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î...');
    await sequelize.authenticate();
    console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ!');

    // –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—ã
    console.log('üîÑ –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—ã...');
    await sequelize.sync({ force: true });
    console.log('‚úÖ –¢–∞–±–ª–∏—Ü—ã —Å–æ–∑–¥–∞–Ω—ã!');

    // –°–æ–∑–¥–∞–µ–º —Å—Ç—É–¥–µ–Ω—Ç–∞
    console.log('üë®‚Äçüéì –°–æ–∑–¥–∞–µ–º —Å—Ç—É–¥–µ–Ω—Ç–∞...');
    const student = await Student.create({
      firstName: 'Mark',
      secondName: 'Mansurov',
      age: 19,
      course: 3
    });
    
    console.log('‚úÖ –°—Ç—É–¥–µ–Ω—Ç —Å–æ–∑–¥–∞–Ω:', student.getFullName());
    console.log('üìö –ö—É—Ä—Å:', student.course);
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞:', error.message);
    console.error('üí° –£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ:');
    console.error('   1. MySQL —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω');
    console.error('   2. –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö "practice_db" —Å–æ–∑–¥–∞–Ω–∞');
    console.error('   3. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å "root" –∏–º–µ–µ—Ç –¥–æ—Å—Ç—É–ø');
  } finally {
    // –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
    await sequelize.close();
  }
}

main();
